import { PluginDefinition } from "@yaakapp/api";

function isJsonContentType(contentType: string | undefined): boolean {
  if (!contentType) return false;
  const ct = contentType.toLowerCase();
  return ct.includes("application/json") || ct.endsWith("+json");
}

function escapeJsString(str: string): string {
  return str
    .replace(/\\/g, "\\\\")
    .replace(/`/g, "\\`")
    .replace(/\$/g, "\\$")
    .replace(/\r/g, "\\r")
    .replace(/\n/g, "\\n");
}

function tryParseJson(text: string): any | undefined {
  try {
    return JSON.parse(text);
  } catch (_) {
    return undefined;
  }
}

function buildHeadersObject(
  headers: Array<{ name: string; value: string }>,
): string | null {
  const obj: Record<string, string> = {};
  for (const h of headers || []) {
    if (!h?.name) continue;
    obj[h.name] = h.value ?? "";
  }
  const entries = Object.entries(obj);
  if (entries.length === 0) return null;
  const lines = entries.map(
    ([k, v]) => `    ${JSON.stringify(k)}: ${JSON.stringify(v)},`,
  );
  return `{
${lines.join("\n")}
  }`;
}

function generateFetchSnippet(req: any): string {
  // Rendered HttpRequest-like object from Yaak
  const method = (req.method || "GET").toUpperCase();
  const url = req.url as string;
  const headersArray: Array<{ name: string; value: string }> = Array.isArray(
    req.headers,
  )
    ? req.headers
    : [];

  const contentTypeHeader = headersArray.find(
    (h) => h.name?.toLowerCase() === "content-type",
  );
  const contentType = contentTypeHeader?.value;

  // Body
  let bodySnippet: string | undefined;
  if (["POST", "PUT", "PATCH", "DELETE"].includes(method)) {
    const body = req.body || {};
    const text = typeof body.text === "string" ? body.text : undefined;
    const mime = (body.mimeType as string | undefined) || contentType;

    if (text && isJsonContentType(mime)) {
      const json = tryParseJson(text);
      if (json !== undefined) {
        bodySnippet = `JSON.stringify(${JSON.stringify(json, null, 2)})`;
      } else {
        bodySnippet = `JSON.stringify(${JSON.stringify(text)})`;
      }
    } else if (text && typeof text === "string") {
      bodySnippet = `"${escapeJsString(text)}"`;
    } else if (
      typeof mime === "string" &&
      mime.toLowerCase().includes("multipart/form-data")
    ) {
      bodySnippet = `/* TODO: Construct FormData for multipart */`;
    } else if (
      typeof mime === "string" &&
      mime.toLowerCase().includes("application/x-www-form-urlencoded")
    ) {
      if (typeof text === "string") {
        bodySnippet = `"${escapeJsString(text)}"`;
      } else {
        bodySnippet = `new URLSearchParams(/* key=value pairs */)`;
      }
    }
  }

  const headersObj = buildHeadersObject(headersArray);

  const optionsLines: string[] = [];
  if (method !== "GET")
    optionsLines.push(`  method: ${JSON.stringify(method)},`);
  if (headersObj) optionsLines.push(`  headers: ${headersObj},`);
  if (bodySnippet) optionsLines.push(`  body: ${bodySnippet},`);

  const options = optionsLines.length
    ? `, {\n${optionsLines.join("\n")}\n}`
    : "";

  return `// Generated by copy-as-javascript (fetch)\nfetch(${JSON.stringify(url)}${options})\n  .then(async (res) => {\n    if (!res.ok) throw new Error(\`Request failed: ${"${res.status}"} ${"${res.statusText}"}\`);\n    const data = await res.json().catch(() => res.text());\n    return data;\n  });`;
}

export const plugin: PluginDefinition = {
  httpRequestActions: [
    {
      label: "Copy as JavaScript (fetch)",
      icon: "copy",
      async onSelect(ctx, args) {
        const rendered = await ctx.httpRequest.render({
          httpRequest: args.httpRequest,
          purpose: "preview",
        });
        const code = generateFetchSnippet(rendered);
        await ctx.clipboard.copyText(code);
        await ctx.toast.show({
          color: "success",
          icon: "check",
          message: "Copied fetch snippet to clipboard",
        });
      },
    },
  ],
};
